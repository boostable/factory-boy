// Generated by CoffeeScript 1.6.2
(function() {
  var FactoryBase, utils;

  utils = require('./utils');

  FactoryBase = (function() {
    function FactoryBase(options, callback) {
      this.options = options != null ? options : {};
      if (callback) {
        callback.call(this);
      }
      this;
    }

    FactoryBase.prototype.association = function(field, name, options) {
      var factoryField, factoryName, factoryOptions;

      options || (options = {});
      if (name === void 0) {
        name = field;
        field = "" + (utils.toUnderscore(name)) + "_id";
      }
      if (typeof name === "object") {
        options = name;
        name = field;
        field = "" + (utils.toUnderscore(name)) + "_id";
      }
      factoryOptions = options.factory || {};
      factoryName = factoryOptions.name || name;
      factoryField = factoryOptions.field || "id";
      return this[field] = function(callback) {
        return Factory.create(factoryName, options, function(err, object) {
          return callback(err, object ? object[factoryField] : null);
        });
      };
    };

    FactoryBase.prototype.sequence = function(field, sequenceCallback) {
      var n;

      n = 1;
      return this[field] = function(callback) {
        return sequenceCallback(n++, callback);
      };
    };

    FactoryBase.prototype.attributes = function() {
      var prop, result, _i, _len, _ref;

      result = {};
      _ref = Object.keys(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        if (typeof this[prop] !== 'function' && prop !== 'options') {
          result[prop] = this[prop];
        }
      }
      return result;
    };

    FactoryBase.prototype.lazyProperties = function() {
      var prop, result, _i, _len, _ref;

      result = {};
      _ref = Object.keys(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        if (typeof this[prop] === 'function' && (prop !== 'createWith' && prop !== 'initializeWith')) {
          result[prop] = this[prop];
        }
      }
      return result;
    };

    return FactoryBase;

  })();

  module.exports = FactoryBase;

}).call(this);
